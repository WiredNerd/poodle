{"mutant_trials": [{"mutant": {"mutator_name": "Decorator", "lineno": 19, "col_offset": 4, "end_lineno": 22, "end_col_offset": 16, "text": "def from_dict(d: dict[str, Any]) -> dict[str, Any]:\n        \"\"\"Correct fields in Dictionary for JSON deserialization.\"\"\"\n        return d", "source_folder": "src", "source_file": "src/poodle/data_types/data.py", "unified_diff": "--- src/poodle/data_types/data.py\n+++ [Mutant] src/poodle/data_types/data.py:19\n@@ -16,7 +16,6 @@\n class PoodleSerialize:\n     \"\"\"Base Class for Data Classes that need to be serialized to JSON.\"\"\"\n \n-    @staticmethod\n     def from_dict(d: dict[str, Any]) -> dict[str, Any]:\n         \"\"\"Correct fields in Dictionary for JSON deserialization.\"\"\"\n         return d\n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 4.597189903259277}, {"mutant": {"mutator_name": "Decorator", "lineno": 90, "col_offset": 4, "end_lineno": 97, "end_col_offset": 16, "text": "def from_dict(d: dict[str, Any]) -> dict[str, Any]:\n        \"\"\"Correct fields in Dictionary for JSON deserialization.\"\"\"\n        if 'source_folder' in d:\n            d['source_folder'] = Path(d['source_folder'])\n        if 'source_file' in d and d['source_folder'] is not None:\n            d['source_file'] = Path(d['source_file'])\n        return d", "source_folder": "src", "source_file": "src/poodle/data_types/data.py", "unified_diff": "--- src/poodle/data_types/data.py\n+++ [Mutant] src/poodle/data_types/data.py:90\n@@ -87,13 +87,12 @@\n     source_file: Path | None\n     unified_diff: str | None = None\n \n-    @staticmethod\n-    def from_dict(d: dict[str, Any]) -> dict[str, Any]:\n-        \"\"\"Correct fields in Dictionary for JSON deserialization.\"\"\"\n-        if \"source_folder\" in d:\n-            d[\"source_folder\"] = Path(d[\"source_folder\"])\n-        if \"source_file\" in d and d[\"source_folder\"] is not None:\n-            d[\"source_file\"] = Path(d[\"source_file\"])\n+    def from_dict(d: dict[str, Any]) -> dict[str, Any]:\n+        \"\"\"Correct fields in Dictionary for JSON deserialization.\"\"\"\n+        if 'source_folder' in d:\n+            d['source_folder'] = Path(d['source_folder'])\n+        if 'source_file' in d and d['source_folder'] is not None:\n+            d['source_file'] = Path(d['source_file'])\n         return d\n \n     def to_dict(self) -> dict[str, Any]:\n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 2.8251378536224365}, {"mutant": {"mutator_name": "Decorator", "lineno": 131, "col_offset": 4, "end_lineno": 138, "end_col_offset": 16, "text": "def from_dict(d: dict[str, Any]) -> dict[str, Any]:\n        \"\"\"Correct fields in Dictionary for JSON deserialization.\"\"\"\n        if 'mutant' in d:\n            d['mutant'] = Mutant(**Mutant.from_dict(d['mutant']))\n        if 'result' in d:\n            d['result'] = MutantTrialResult(**d['result'])\n        return d", "source_folder": "src", "source_file": "src/poodle/data_types/data.py", "unified_diff": "--- src/poodle/data_types/data.py\n+++ [Mutant] src/poodle/data_types/data.py:131\n@@ -128,13 +128,12 @@\n     result: MutantTrialResult\n     duration: float\n \n-    @staticmethod\n-    def from_dict(d: dict[str, Any]) -> dict[str, Any]:\n-        \"\"\"Correct fields in Dictionary for JSON deserialization.\"\"\"\n-        if \"mutant\" in d:\n-            d[\"mutant\"] = Mutant(**Mutant.from_dict(d[\"mutant\"]))\n-        if \"result\" in d:\n-            d[\"result\"] = MutantTrialResult(**d[\"result\"])\n+    def from_dict(d: dict[str, Any]) -> dict[str, Any]:\n+        \"\"\"Correct fields in Dictionary for JSON deserialization.\"\"\"\n+        if 'mutant' in d:\n+            d['mutant'] = Mutant(**Mutant.from_dict(d['mutant']))\n+        if 'result' in d:\n+            d['result'] = MutantTrialResult(**d['result'])\n         return d\n \n     def to_dict(self) -> dict[str, Any]:\n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 4.5976104736328125}, {"mutant": {"mutator_name": "Decorator", "lineno": 188, "col_offset": 4, "end_lineno": 193, "end_col_offset": 16, "text": "def from_dict(d: dict[str, Any]) -> dict[str, Any]:\n        \"\"\"Correct fields in Dictionary for JSON deserialization.\"\"\"\n        d.pop('success_rate', None)\n        d.pop('coverage_display', None)\n        return d", "source_folder": "src", "source_file": "src/poodle/data_types/data.py", "unified_diff": "--- src/poodle/data_types/data.py\n+++ [Mutant] src/poodle/data_types/data.py:188\n@@ -185,11 +185,10 @@\n \n         return self\n \n-    @staticmethod\n-    def from_dict(d: dict[str, Any]) -> dict[str, Any]:\n-        \"\"\"Correct fields in Dictionary for JSON deserialization.\"\"\"\n-        d.pop(\"success_rate\", None)\n-        d.pop(\"coverage_display\", None)\n+    def from_dict(d: dict[str, Any]) -> dict[str, Any]:\n+        \"\"\"Correct fields in Dictionary for JSON deserialization.\"\"\"\n+        d.pop('success_rate', None)\n+        d.pop('coverage_display', None)\n         return d\n \n     def to_dict(self) -> dict[str, Any]:\n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 2.8186306953430176}, {"mutant": {"mutator_name": "Decorator", "lineno": 210, "col_offset": 4, "end_lineno": 217, "end_col_offset": 16, "text": "def from_dict(d: dict[str, Any]) -> dict[str, Any]:\n        \"\"\"Correct fields in Dictionary for JSON deserialization.\"\"\"\n        if 'mutant_trials' in d:\n            d['mutant_trials'] = [MutantTrial(**MutantTrial.from_dict(trial)) for trial in d['mutant_trials']]\n        if 'summary' in d and d['summary'] is not None:\n            d['summary'] = TestingSummary(**TestingSummary.from_dict(d['summary']))\n        return d", "source_folder": "src", "source_file": "src/poodle/data_types/data.py", "unified_diff": "--- src/poodle/data_types/data.py\n+++ [Mutant] src/poodle/data_types/data.py:210\n@@ -207,13 +207,12 @@\n     mutant_trials: list[MutantTrial]\n     summary: TestingSummary\n \n-    @staticmethod\n-    def from_dict(d: dict[str, Any]) -> dict[str, Any]:\n-        \"\"\"Correct fields in Dictionary for JSON deserialization.\"\"\"\n-        if \"mutant_trials\" in d:\n-            d[\"mutant_trials\"] = [MutantTrial(**MutantTrial.from_dict(trial)) for trial in d[\"mutant_trials\"]]\n-        if \"summary\" in d and d[\"summary\"] is not None:\n-            d[\"summary\"] = TestingSummary(**TestingSummary.from_dict(d[\"summary\"]))\n+    def from_dict(d: dict[str, Any]) -> dict[str, Any]:\n+        \"\"\"Correct fields in Dictionary for JSON deserialization.\"\"\"\n+        if 'mutant_trials' in d:\n+            d['mutant_trials'] = [MutantTrial(**MutantTrial.from_dict(trial)) for trial in d['mutant_trials']]\n+        if 'summary' in d and d['summary'] is not None:\n+            d['summary'] = TestingSummary(**TestingSummary.from_dict(d['summary']))\n         return d\n \n     def to_dict(self) -> dict[str, Any]:\n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 4.484997034072876}, {"mutant": {"mutator_name": "Decorator", "lineno": 60, "col_offset": 4, "end_lineno": 89, "end_col_offset": 63, "text": "def get_location(node: ast.AST) -> tuple[int, int, int, int]:\n        \"\"\"Get location lines and columns that encompasses node and all child nodes.\"\"\"\n        lineno = node.lineno\n        col_offset = node.col_offset\n        end_lineno = node.end_lineno or node.lineno\n        end_col_offset = node.end_col_offset or node.col_offset\n        for n in ast.walk(node):\n            if not hasattr(n, 'lineno'):\n                continue\n            if n.lineno < lineno:\n                lineno = n.lineno\n                if n.col_offset < col_offset:\n                    col_offset = n.col_offset\n            elif n.lineno == lineno and n.col_offset < col_offset:\n                col_offset = n.col_offset\n            if not hasattr(n, 'end_lineno') or not n.end_lineno:\n                continue\n            if n.end_lineno > end_lineno:\n                end_lineno = n.end_lineno\n                if n.end_col_offset:\n                    end_col_offset = n.end_col_offset\n            elif n.end_lineno == end_lineno and n.end_col_offset and (n.end_col_offset > end_col_offset):\n                end_col_offset = n.end_col_offset\n        return (lineno, col_offset, end_lineno, end_col_offset)", "source_folder": "src", "source_file": "src/poodle/data_types/interfaces.py", "unified_diff": "--- src/poodle/data_types/interfaces.py\n+++ [Mutant] src/poodle/data_types/interfaces.py:60\n@@ -57,35 +57,29 @@\n             text=text,\n         )\n \n-    @staticmethod\n     def get_location(node: ast.AST) -> tuple[int, int, int, int]:\n         \"\"\"Get location lines and columns that encompasses node and all child nodes.\"\"\"\n         lineno = node.lineno\n         col_offset = node.col_offset\n         end_lineno = node.end_lineno or node.lineno\n         end_col_offset = node.end_col_offset or node.col_offset\n-\n         for n in ast.walk(node):\n-            if not hasattr(n, \"lineno\"):\n+            if not hasattr(n, 'lineno'):\n                 continue\n-\n-            if n.lineno < lineno:  # decorators\n+            if n.lineno < lineno:\n                 lineno = n.lineno\n                 if n.col_offset < col_offset:\n                     col_offset = n.col_offset\n             elif n.lineno == lineno and n.col_offset < col_offset:\n                 col_offset = n.col_offset\n-\n-            if not hasattr(n, \"end_lineno\") or not n.end_lineno:\n+            if not hasattr(n, 'end_lineno') or not n.end_lineno:\n                 continue\n-\n             if n.end_lineno > end_lineno:\n                 end_lineno = n.end_lineno\n                 if n.end_col_offset:\n                     end_col_offset = n.end_col_offset\n-            elif n.end_lineno == end_lineno and n.end_col_offset and n.end_col_offset > end_col_offset:\n+            elif n.end_lineno == end_lineno and n.end_col_offset and (n.end_col_offset > end_col_offset):\n                 end_col_offset = n.end_col_offset\n-\n         return (lineno, col_offset, end_lineno, end_col_offset)\n \n     @staticmethod\n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 2.9097416400909424}, {"mutant": {"mutator_name": "Decorator", "lineno": 115, "col_offset": 4, "end_lineno": 121, "end_col_offset": 29, "text": "def unparse(cls, node: ast.AST, indent: int) -> str:\n        \"\"\"Unparse AST node to string.  Indent any lines that are not the first line.\"\"\"\n        lines = ast.unparse(node).splitlines(keepends=True)\n        if len(lines) > 1:\n            lines[1:] = [f'{' ' * indent}{line}' for line in lines[1:]]\n        return ''.join(lines)", "source_folder": "src", "source_file": "src/poodle/data_types/interfaces.py", "unified_diff": "--- src/poodle/data_types/interfaces.py\n+++ [Mutant] src/poodle/data_types/interfaces.py:115\n@@ -112,13 +112,12 @@\n \n         return cls.is_annotation(node.parent, child_node=node)\n \n-    @classmethod\n     def unparse(cls, node: ast.AST, indent: int) -> str:\n         \"\"\"Unparse AST node to string.  Indent any lines that are not the first line.\"\"\"\n         lines = ast.unparse(node).splitlines(keepends=True)\n         if len(lines) > 1:\n-            lines[1:] = [f\"{' ' * indent}{line}\" for line in lines[1:]]\n-        return \"\".join(lines)\n+            lines[1:] = [f'{' ' * indent}{line}' for line in lines[1:]]\n+        return ''.join(lines)\n \n \n # runner method signature:\n"}, "result": {"found": false, "reason_code": "Mutant Not Found", "reason_desc": null}, "duration": 2.799596071243286}], "summary": {"trials": 13, "tested": 13, "found": 6, "not_found": 7, "timeout": 0, "errors": 0, "success_rate": 0.46153846153846156, "coverage_display": "46.1%"}}